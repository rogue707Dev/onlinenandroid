echo "##########################################"
echo "Online Nandroid Backup v2.3"
echo "* A tool to perform a nandroid backup"
echo "  without booting into recovery. It can"
echo "  be run via adb shell or terminal"
echo "  emulator in Android, thus allowing"
echo "  you to do a live nandroid backup"
echo "  within Android."
echo "* This tool backups /system , /data , "
echo "  /cache & .android_secure partitions."
echo "* It is fully compatible with nandroid."
echo "* Type 'onandroid --help' for usage"
echo "  instructions."
echo "* Created by Ameer Dawood"
echo "##########################################"
echo ""

# Define constants
path="/sdcard/clockworkmod/backup"
safety=7
name="none"
tz="u"

# Process arguments
if [ $# -gt 0 ]; then
	if [ $1 == "--help" ]; then
		# Display usage instructions
		clear
		echo ""
		echo "Usage: onandroid [OPTIONS] [NAME]"
		echo ""
		echo "Performs a nandroid backup with the NAME provided, or a default backup name consisting of the current date and time"
		echo ""
		echo "		-h		Generate backup name with phone timezone"
		echo "		-u		Generate backup name with UTC time (default)"
		echo ""
		exit 0
	elif [ $1 == "-h" ]; then
		# Set timezone to home/phone timezone
		tz="h"
		if [ $# -gt 1 ]; then
			echo "`date +%T` Custom backup name not allowed with timezone modifier! Continuing with default backup name!"
		fi
	elif [ $1 == "-u" ]; then
		# Set timezone to UTC
		tz="u"
		if [ $# -gt 1 ]; then
			echo "`date +%T` Custom backup name not allowed with timezone modifier! Continuing with default backup name!"
		fi
	else
		if [ $# -gt 1 ]; then
			echo "`date +%T` Spaces not allowed in backup name! Continuing with default backup name!"
		else
			# Grab custom backup name
			name=$1
		fi
	fi
fi

# Set default backup name (with date)
if [ $tz == "h" ]; then
	def_name=`date +%Y-%m-%d.%H.%M.%S`
else
	def_name=`date -u +%Y-%m-%d.%H.%M.%S`
fi

# Set backup name to default if backup name was not provided
if [ $name == "none" ]; then
	name=$def_name
fi

# Start timer
start_time=`date +%s`

# Check for root permissions
echo "`date +%T` Checking for root permissions..."
uid=`whoami`
if [ $uid == "root" ]; then
	echo "`date +%T` Root permissions aquired!"
else
	echo "`date +%T` Could not aquire root permissions!"
	exit 1
fi

# Check for required tools
echo "`date +%T` Checking for required tools..."
mkyaffs2image=`which mkyaffs2image`
if [ "$mkyaffs2image" == "" ]; then
	echo "`date +%T` Error: mkyaffs2image not found in path."
	exit 1
fi
md5sum=`which md5sum`
if [ "$md5sum" == "" ]; then
	echo "`date +%T` Error: md5sum not found in path."
	exit 1
fi
tar==`which tar`
if [ "$tar" == "" ]; then
	echo "`date +%T` Error: tar not found in path."
	exit 1
fi
echo "`date +%T` All required tools available."

# Disk space check (in MB)
echo "`date +%T` Checking disk space..."
entry=`df -m /system | tail -1`
u_system=`echo $entry | cut -d' ' -f3 | cut -d'%' -f1`
entry=`df -m /data | tail -1`
u_data=`echo $entry | cut -d' ' -f3 | cut -d'%' -f1`
entry=`df -m /cache | tail -1`
u_cache=`echo $entry | cut -d' ' -f3 | cut -d'%' -f1`
# Mount sdcard into a temporary location for accessing .android_secure partition
mount -o remount rw //
mkdir /mnt/sdcard4nandroid
mount /dev/block/vold/179:1 /mnt/sdcard4nandroid
cd /mnt/sdcard4nandroid
u_as=`du -m .android_secure | cut -f1`
req_space=`expr $u_system + $u_data + $u_cache + $u_as + $safety`
entry=`df -m /mnt/sdcard | tail -1`
freespace=`echo $entry | cut -d' ' -f3 | cut -d'%' -f1`
echo "`date +%T` SD Card Free Space: $freespace MB"
echo "`date +%T` Required Space: $req_space MB"
if [ $freespace -lt $req_space ]; then
	echo "`date +%T` Not enough disk space! Exiting!"
	exit 1
else
	echo "`date +%T` Necessary disk space available! Continuing..."
fi

# Change to backup directory
cd $path

# Create directory for backup
echo "`date +%T` Creating backup directory..."
if [ ! -d $name ]; then 
	mkdir -p -- $name
	if [ ! -d $name ]; then 
		echo "`date +%T` Error: Cannot create $name"
		exit 1
	fi
else
	echo "`date +%T` Error: $name already exists! Exiting!"
	exit 1
fi
touch -- $name/.nandroidwritable
if [ ! -e $name/.nandroidwritable ]; then
	echo "`date +%T` Error: Cannot write to $name"
	exit 1
fi
rm -- $name/.nandroidwritable

echo "`date +%T` Backing up to $path/$name"
echo "`date +%T` Opening backup directory..."
cd -- $name

# Backup system
echo -e "`date +%T` Backing up /system...\c"
mkyaffs2image /system system.yaffs2.img &
while [ `pidof mkyaffs2image` ]; do
	echo -n "."
	sleep 2
done
echo ""

# Backup data
echo -e "`date +%T` Backing up /data...\c"
mkyaffs2image /data data.yaffs2.img &
while [ `pidof mkyaffs2image` ]; do
	echo -n "."
	sleep 2
done
echo ""

# Backup cache
echo -e "`date +%T` Backing up /cache...\c"
mkyaffs2image /cache cache.yaffs2.img &
while [ `pidof mkyaffs2image` ]; do
	echo -n "."
	sleep 2
done
echo ""

# Backup .android_secure
echo -e "`date +%T` Backing up .android_secure...\c"
cd /mnt/sdcard4nandroid
tar -cf $path/$name/.android_secure.vfat.tar .android_secure &
while [ `pidof tar` ]; do
	echo -n "."
	sleep 2
done
echo ""

# Unmount temporary sdcard mount as .android_secure backup is complete
# Wait 2 seconds before we umount device
sleep 2
umount -l /mnt/sdcard4nandroid
cd /mnt
rmdir sdcard4nandroid
mount -o remount ro //
cd $path/$name

# Generate md5
echo -e "`date +%T` Generating md5sum...\c"
md5sum .android_secure.vfat.tar * > nandroid.md5 &
while [ `pidof md5sum` ]; do
	echo -n "."
	sleep 2
done
echo ""

# End timer
end_time=`date +%s`
elapsed=`expr $end_time - $start_time`

# Calculate elapsed time and Announce
e_min=`expr $elapsed / 60`
e_sec=`expr $e_min \* 60`
e_sec=`expr $elapsed - $e_sec`
echo "`date +%T` Online Nandroid Backup Completed in $e_min minutes $e_sec seconds!"
