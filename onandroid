echo "##########################################"
echo "Online Nandroid Backup v3.4"
echo "* A tool to perform a nandroid backup"
echo "  without booting into recovery. It can"
echo "  be run via adb shell or terminal"d
echo "  emulator in Android, thus allowing"
echo "  you to do a live nandroid backup"
echo "  within Android."
echo "* This tool backups /system , /data , "
echo "  /cache , .android_secure & sd-ext"
echo "  partitions."
echo "* It is fully compatible with nandroid."
echo "* Type 'onandroid --help' for usage"
echo "  instructions."
echo "* Created by Ameer Dawood"
echo "##########################################"
echo ""

# Define constants
path="/sdcard/clockworkmod/backup"
safety=7
name="none"
tz="u"
req_power=10
sdcard_temp_mount="/mnt/sdcard4nandroid"
logfile=/data/local/tmp/onandroid.log

# Logging function
[ -f $logfile ] && busybox rm $logfile
logmsg(){
	message="$*"
	dtime=`busybox date +%T`
	echo -e "$dtime $message"
	echo "$dtime $message" >>$logfile
	if [ "`which log`" != "" ]; then
		log -p i -t onandroid "$message"
	fi
}

# Process arguments
if [ $# -gt 0 ]; then
	if [ $1 == "--help" ]; then
		# Display usage instructions
		clear
		echo ""
		echo "Usage: onandroid [OPTIONS] [NAME]"
		echo ""
		echo "Performs a nandroid backup with the NAME provided, or a default backup name consisting of the current date and time"
		echo ""
		echo "		-h		Generate backup name with phone timezone"
		echo "		-u		Generate backup name with UTC time (default)"
		echo ""
		exit 0
	elif [ $1 == "-h" ]; then
		# Set timezone to home/phone timezone
		tz="h"
		if [ $# -gt 1 ]; then
			logmsg "Custom backup name not allowed with timezone modifier! Continuing with default backup name..."
		fi
	elif [ $1 == "-u" ]; then
		# Set timezone to UTC
		tz="u"
		if [ $# -gt 1 ]; then
			logmsg "Custom backup name not allowed with timezone modifier! Continuing with default backup name..."
		fi
	else
		if [ $# -gt 1 ]; then
			logmsg "Spaces not allowed in backup name! Continuing with default backup name..."
		else
			# Grab custom backup name
			name=$1
		fi
	fi
fi

# Set default backup name (with date)
if [ $tz == "h" ]; then
	def_name=`busybox date +%Y-%m-%d.%H.%M.%S`
else
	def_name=`busybox date -u +%Y-%m-%d.%H.%M.%S`
fi

# Set backup name to default if backup name was not provided
if [ $name == "none" ]; then
	name=$def_name
fi

# Start timer
start_time=`busybox date +%s`

# Analyse power status
logmsg "Analysing power..."
if [ -f /sys/class/power_supply/bq27520/capacity ]; then
	rem_power=`cat /sys/class/power_supply/bq27520/capacity`
	if [ `cat /sys/class/power_supply/ac/online` == "1" ]; then
		rem_power=100
	fi
else
	rem_power=-1
fi

# Check if power is sufficient
if [ $rem_power == -1 ]; then
	logmsg "Unable to check power status! Taking a chance here..."
elif [ $rem_power -gt $req_power ]; then
	logmsg "Sufficient power available! Continuing..."
else
	logmsg "Sufficient power not available! Exiting..."
	exit 1
fi

# Check if SD card is mounted
logmsg "Searching for SD card..."
is_sdcard_mounted=`busybox mount | busybox grep "sdcard.*vfat" | busybox cut -d ' ' -f 1`
if [ "$is_sdcard_mounted" == "" ]; then
	logmsg "SD card not found! Exiting..."
	exit 1
else
	logmsg "SD card found! Continuing..."
fi

# Check for root permissions
logmsg "Checking for root permissions..."
if [ "`busybox id -u`" == "0" ]; then
	logmsg "Root permissions aquired! Continuing..."
else
	logmsg "Could not aquire root permissions! Exiting..."
	exit 1
fi

# Check for required tools
logmsg "Checking for required tools..."
if [ "`which mkyaffs2image`" == "" ]; then
	logmsg "Error: mkyaffs2image not found in path! Exiting..."
	exit 1
fi
md5sum=`which md5sum`
if [ "$md5sum" == "" ]; then
	logmsg "Error: md5sum not found in path! Exiting..."
	exit 1
fi
tar==`which tar`
if [ "$tar" == "" ]; then
	logmsg "Error: tar not found in path! Exiting..."
	exit 1
fi
logmsg "All required tools available! Continuing..."

# Disk space check (in MB)
logmsg "Checking disk space..."

# /system partition size
entry=`busybox df -m /system | busybox tail -1`
u_system=`echo $entry | busybox cut -d' ' -f 3 | busybox cut -d '%' -f 1`

# /data partition size
entry=`busybox df -m /data | busybox tail -1`
u_data=`echo $entry | busybox cut -d' ' -f 3 | busybox cut -d '%' -f 1`

# /cache partition size
entry=`busybox df -m /cache | busybox tail -1`
u_cache=`echo $entry | busybox cut -d' ' -f 3 | busybox cut -d '%' -f 1`

# .android_secure partition size
# Determine mount command's output format
if [ "`busybox mount | busybox grep "sdcard.*vfat" | busybox cut -d ' ' -f 2`" == "on" ]; then
	sdcardm=`busybox mount | busybox grep "sdcard.*vfat" | busybox cut -d ' ' -f 3`
else
	sdcardm=`busybox mount | busybox grep "sdcard.*vfat" | busybox cut -d ' ' -f 2`
fi
# Mount sdcard into a temporary location for accessing .android_secure partition
busybox mount -o remount,rw /
busybox mkdir -p $sdcard_temp_mount
busybox mount $sdcardm $sdcard_temp_mount
cd $sdcard_temp_mount
u_as=`busybox du -m .android_secure | busybox cut -f 1`

# sd-ext partition size
# Check if sd-ext is mounted
is_sdext_mounted=`busybox mount | busybox grep "ext.*ext" | busybox cut -d ' ' -f 1`
if [ "$is_sdext_mounted" == "" ]; then
	sdext_exists=0
else
	sdext_exists=1
fi
if [ $sdext_exists == 1 ]; then
	# Determine mount command's output format
	if [ `busybox mount | busybox grep "ext.*ext" | busybox cut -d ' ' -f 2` == "on" ]; then
		extv=`busybox mount | busybox grep "ext.*ext" | busybox cut -d ' ' -f 5`
		extd=`busybox mount | busybox grep "ext.*ext" | busybox cut -d ' ' -f 3 | busybox cut -d '/' -f 2`
		extm=`busybox mount | busybox grep "ext.*ext" | busybox cut -d ' ' -f 3`
	else
		extv=`busybox mount | busybox grep "ext.*ext" | busybox cut -d ' ' -f 3`
		extd=`busybox mount | busybox grep "ext.*ext" | busybox cut -d ' ' -f 2 | busybox cut -d '/' -f 2`
		extm=`busybox mount | busybox grep "ext.*ext" | busybox cut -d ' ' -f 2`
	fi
	# Grab sd-ext mount point
	entry=`busybox df -m $extm | busybox tail -1`
	u_ext=`echo $entry | busybox cut -d ' ' -f 3 | busybox cut -d '%' -f 1`
else
	u_ext=0
fi

# Required space calculation
req_space=`busybox expr $u_system + $u_data + $u_cache + $u_as + $u_ext + $safety`

# Available space calculation
entry=`busybox df -m /sdcard | busybox tail -1`
freespace=`echo $entry | busybox cut -d ' ' -f 3 | busybox cut -d '%' -f 1`

# Announce available space and required space
logmsg "SD Card Free Space: $freespace MB"
logmsg "Required Space: $req_space MB"
if [ $freespace -lt $req_space ]; then
	logmsg "Not enough disk space! Exiting..."
	exit 1
else
	logmsg "Necessary disk space available! Continuing..."
fi

# Change to backup directory
busybox mkdir -p $path
cd $path

# Create directory for backup
logmsg "Creating backup directory..."
if [ ! -d $name ]; then 
	busybox mkdir -p -- $name
	if [ ! -d $name ]; then 
		logmsg "Error: Cannot create $name"
		exit 1
	fi
else
	logmsg "Error: $name already exists! Exiting..."
	exit 1
fi
busybox touch -- $name/.nandroidwritable
if [ ! -e $name/.nandroidwritable ]; then
	logmsg "Error: Cannot write to $name ! Exiting..."
	exit 1
fi
busybox rm -- $name/.nandroidwritable

logmsg "Backing up to $path/$name"
logmsg "Opening backup directory..."
cd -- $name

# Backup system
logmsg "Backing up /system...\c"
mkyaffs2image /system system.yaffs2.img &
while [ `busybox pidof mkyaffs2image` ]; do
	echo -n "."
	sleep 2
done
echo ""

# Backup data
logmsg "Backing up /data...\c"
mkyaffs2image /data data.yaffs2.img &
while [ `busybox pidof mkyaffs2image` ]; do
	echo -n "."
	sleep 2
done
echo ""

# Backup cache
logmsg "Backing up /cache...\c"
mkyaffs2image /cache cache.yaffs2.img &
while [ `busybox pidof mkyaffs2image` ]; do
	echo -n "."
	sleep 2
done
echo ""

# Backup .android_secure
logmsg "Backing up .android_secure...\c"
cd /mnt/sdcard4nandroid
tar -cf $path/$name/.android_secure.vfat.tar .android_secure &
while [ `busybox pidof tar` ]; do
	echo -n "."
	sleep 2
done
echo ""

# Unmount temporary sdcard mount as .android_secure backup is complete
# Wait 2 seconds before we umount device
sleep 2
busybox umount -l $sdcard_temp_mount
busybox rmdir $sdcard_temp_mount
busybox mount -o remount,ro /

# Backup sd-ext
if [ $sdext_exists == 1 ]; then
	# Grab ext version
	logmsg "Backing up sd-ext...\c"
	cd $extm
	cd ..
	tar -cf $path/$name/sd-ext.$extv.tar $extd &
	while [ `busybox pidof tar` ]; do
		echo -n "."
		sleep 2
	done
	echo ""
else
	logmsg "sd-ext not found! Skipping backup of sd-ext!"
fi

# Generate md5
logmsg "Generating md5sum...\c"
cd $path/$name
md5sum .android_secure.vfat.tar * > nandroid.md5 &
while [ `busybox pidof md5sum` ]; do
	echo -n "."
	sleep 2
done
echo ""

# End timer
end_time=`busybox date +%s`
elapsed=`busybox expr $end_time - $start_time`

# Calculate elapsed time and Announce
e_min=`busybox expr $elapsed / 60`
e_sec=`busybox expr $e_min \* 60`
e_sec=`busybox expr $elapsed - $e_sec`
logmsg "Online Nandroid Backup Completed in $e_min minutes $e_sec seconds!"
